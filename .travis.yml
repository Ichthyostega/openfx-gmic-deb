env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "BHTVqzY9M4J483xNY2wzKX2FGMs6nzFCUnOLPCZxPImox64q1KX/jt8EYjuCjB52UhRm86Wh+tbTONnLZxEbBeLkzvZpM+8yi3wuVf3KUqedykD1p1SHo+ZDnWLt+H3nRpF2TcaJP3XDRJ16Hkf7udOxwfTAHPiDm/v3UR1OvQ0vn/oUBA1ghzh93HbHf1ZTOQRRuNp0rI1Me1HX17MX2IeLvGD1LXx/VzxI6pQVIw/7/EXJfs/f9Gc7zx9cv6fjS3umWg+Y7rEYvc97kniGZ0ZRrWbJPuFNv0XKmls78LrBLmnG5NyAWiYPE/3I4Fn4qgz689r/O7b60YSqaQiU9zbBrEDDCs+GsF1FgSdoPJaa/Ks6UY8xVUWohZiC81o7OtGSiX8bnoYOD1zvY6QYG8AUrkp1Wbxem/nZB38UeeJUI3OMNBjYnISV6eHO7dvIXdy27gj8ib+nVpAGMUXj6bNVLvIFT2z7MT+9RJL3AC1Id9PjkmmDk101MRqdGCT9lkC93PnxSBYuzLSmpYMjt0RrEaPPa6iMHIDK5xoo1UiPe1TbucYrk/Tvk2SIq6qHAK7fJ0ZKmdE2YafGzFAMIQ8xP/rJTpHPhSHpMe9D4GE3huG8hVXGgHmy/OHirQtmJzRvZ2wgFtA2Akrb5UmolJmHR5msY3zsY6d1Oq/mwaA="
   # Coverity run condition (avoid matrix multiple runs), need customized
   # build script. Need an update if new matrix cases.
   - coverity_scan_run_condition='"$CC" = gcc -a "$TRAVIS_OS_NAME" != osx'
   # Coverity script test mode (if true no uploading, avoid reaching the quota)
   # usual processing: false.
   - coverity_scan_script_test_mode=false
   # Travis CI has 1.5 cores per VM, take advantage of it
   - MAKEFLAGS="-j 2"

os:
  - linux
  - osx

language: cpp

compiler:
  - gcc
  - clang

matrix:
  exclude:
    - os: osx
      compiler: gcc
  fast_finish: true

before_install:
  - env
  - df
  - date -u
  - uname -a
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then
      echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca- ;
    fi
  - export J='-j3'
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then
      sudo apt-get install libfftw3-dev;
    fi
  - if [ ${TRAVIS_OS_NAME} = "osx" ]; then
      brew install fftw || true;
    fi

install:
  - git submodule update --init --recursive
  - if [[ ${COVERITY_BUILD_DISABLED} == 1 ]];
    then
        exit 0;
    fi
  - if [ ${TRAVIS_OS_NAME} = "linux" -a "$CC" = "gcc" ];
    then
        if [ "$BUILDDOC" = 1 ]; then
            sudo apt-get install doxygen xsltproc;
        fi;
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test;
        sudo apt-get update;
        sudo apt-get install gcc-7 g++-7;
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 90;
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 90;
    fi

# CImg is now downloaded by CImg/Makefile, no need to install it
#  - sudo apt-get install cimg-dev

script:
  - if [[ ${COVERITY_SCAN_BRANCH} == 1 ]];
    then
      echo "Don't build on coverity_scan branch.";
      exit 0;
    fi
  - make $J CONFIG=debug
  - make $J nomulti CONFIG=debug
  - if [ "$CC" = "gcc" ]; then
      make -C GMIC_OFX clean;
      make -C GMIC_OFX CONFIG=debug OPENMP=1;
    fi

# ubuntu-toolchain-r/test contains recent versions of gcc
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - ca-certificates
    - gcc-7
    - g++-7
    - libfftw3-dev
  coverity_scan:
    # customized build script URL
    # TRAVIS_REPO_SLUG: owner_name/repo_name of repository currently being built
    # TRAVIS_BRANCH: name of the branch currently being built
    build_script_url: https://raw.githubusercontent.com/$TRAVIS_REPO_SLUG/$TRAVIS_BRANCH/.travis-coverity-scan-build.sh
    # project metadata
    project:
      name: $TRAVIS_REPO_SLUG
    # Where email notification of build analysis results will be sent
    notification_email: frederic.devernay@m4x.org
    # Commands to prepare for build_command
    #build_command_prepend: ./configure
    # This command will be added as an argument to "cov-build" to compile
    # the project for analysis
    build_command: "make $J CONFIG=debug"
    # Pattern to match selecting branches that will run analysis
    branch_pattern: coverity_scan
